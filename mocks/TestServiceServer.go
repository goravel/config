// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "github.com/goravel/framework/grpc"
	mock "github.com/stretchr/testify/mock"
)

// TestServiceServer is an autogenerated mock type for the TestServiceServer type
type TestServiceServer struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TestServiceServer) Get(_a0 context.Context, _a1 *grpc.TestRequest) (*grpc.TestResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *grpc.TestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.TestRequest) (*grpc.TestResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.TestRequest) *grpc.TestResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.TestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grpc.TestRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTestServiceServer creates a new instance of TestServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTestServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TestServiceServer {
	mock := &TestServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
