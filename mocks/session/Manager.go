// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	session "github.com/goravel/framework/contracts/session"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// BuildSession provides a mock function with given fields: handler, id
func (_m *Manager) BuildSession(handler session.Handler, id ...string) session.Session {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(session.Handler, ...string) session.Session); ok {
		r0 = rf(handler, id...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Driver provides a mock function with given fields: name
func (_m *Manager) Driver(name ...string) (session.Handler, error) {
	_va := make([]interface{}, len(name))
	for _i := range name {
		_va[_i] = name[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 session.Handler
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (session.Handler, error)); ok {
		return rf(name...)
	}
	if rf, ok := ret.Get(0).(func(...string) session.Handler); ok {
		r0 = rf(name...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Handler)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(name...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Extend provides a mock function with given fields: driver, handler
func (_m *Manager) Extend(driver string, handler func() session.Handler) session.Manager {
	ret := _m.Called(driver, handler)

	var r0 session.Manager
	if rf, ok := ret.Get(0).(func(string, func() session.Handler) session.Manager); ok {
		r0 = rf(driver, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Manager)
		}
	}

	return r0
}

// Store provides a mock function with given fields: sessionId
func (_m *Manager) Store(sessionId ...string) session.Session {
	_va := make([]interface{}, len(sessionId))
	for _i := range sessionId {
		_va[_i] = sessionId[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(...string) session.Session); ok {
		r0 = rf(sessionId...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
