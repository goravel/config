// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	database "github.com/goravel/framework/contracts/database"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// Dialector is an autogenerated mock type for the Dialector type
type Dialector struct {
	mock.Mock
}

// Make provides a mock function with given fields: configs
func (_m *Dialector) Make(configs []database.Config) ([]gorm.Dialector, error) {
	ret := _m.Called(configs)

	var r0 []gorm.Dialector
	var r1 error
	if rf, ok := ret.Get(0).(func([]database.Config) ([]gorm.Dialector, error)); ok {
		return rf(configs)
	}
	if rf, ok := ret.Get(0).(func([]database.Config) []gorm.Dialector); ok {
		r0 = rf(configs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gorm.Dialector)
		}
	}

	if rf, ok := ret.Get(1).(func([]database.Config) error); ok {
		r1 = rf(configs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDialector creates a new instance of Dialector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDialector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dialector {
	mock := &Dialector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
