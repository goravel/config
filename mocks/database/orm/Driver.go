// Code generated by mockery. DO NOT EDIT.

package orm

import (
	database "github.com/goravel/framework/contracts/database"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	testing "github.com/goravel/framework/contracts/testing"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

type Driver_Expecter struct {
	mock *mock.Mock
}

func (_m *Driver) EXPECT() *Driver_Expecter {
	return &Driver_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with no fields
func (_m *Driver) Config() database.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 database.Config
	if rf, ok := ret.Get(0).(func() database.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(database.Config)
	}

	return r0
}

// Driver_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type Driver_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *Driver_Expecter) Config() *Driver_Config_Call {
	return &Driver_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *Driver_Config_Call) Run(run func()) *Driver_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Driver_Config_Call) Return(_a0 database.Config) *Driver_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Driver_Config_Call) RunAndReturn(run func() database.Config) *Driver_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Docker provides a mock function with no fields
func (_m *Driver) Docker() (testing.DatabaseDriver, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Docker")
	}

	var r0 testing.DatabaseDriver
	var r1 error
	if rf, ok := ret.Get(0).(func() (testing.DatabaseDriver, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() testing.DatabaseDriver); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(testing.DatabaseDriver)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Driver_Docker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Docker'
type Driver_Docker_Call struct {
	*mock.Call
}

// Docker is a helper method to define mock.On call
func (_e *Driver_Expecter) Docker() *Driver_Docker_Call {
	return &Driver_Docker_Call{Call: _e.mock.On("Docker")}
}

func (_c *Driver_Docker_Call) Run(run func()) *Driver_Docker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Driver_Docker_Call) Return(_a0 testing.DatabaseDriver, _a1 error) *Driver_Docker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Driver_Docker_Call) RunAndReturn(run func() (testing.DatabaseDriver, error)) *Driver_Docker_Call {
	_c.Call.Return(run)
	return _c
}

// Gorm provides a mock function with no fields
func (_m *Driver) Gorm() (*gorm.DB, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gorm")
	}

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gorm.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Driver_Gorm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gorm'
type Driver_Gorm_Call struct {
	*mock.Call
}

// Gorm is a helper method to define mock.On call
func (_e *Driver_Expecter) Gorm() *Driver_Gorm_Call {
	return &Driver_Gorm_Call{Call: _e.mock.On("Gorm")}
}

func (_c *Driver_Gorm_Call) Run(run func()) *Driver_Gorm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Driver_Gorm_Call) Return(_a0 *gorm.DB, _a1 error) *Driver_Gorm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Driver_Gorm_Call) RunAndReturn(run func() (*gorm.DB, error)) *Driver_Gorm_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
