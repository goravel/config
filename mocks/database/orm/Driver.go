// Code generated by mockery. DO NOT EDIT.

package orm

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

type Driver_Expecter struct {
	mock *mock.Mock
}

func (_m *Driver) EXPECT() *Driver_Expecter {
	return &Driver_Expecter{mock: &_m.Mock}
}

// Dialector provides a mock function with no fields
func (_m *Driver) Dialector() gorm.Dialector {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dialector")
	}

	var r0 gorm.Dialector
	if rf, ok := ret.Get(0).(func() gorm.Dialector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gorm.Dialector)
		}
	}

	return r0
}

// Driver_Dialector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dialector'
type Driver_Dialector_Call struct {
	*mock.Call
}

// Dialector is a helper method to define mock.On call
func (_e *Driver_Expecter) Dialector() *Driver_Dialector_Call {
	return &Driver_Dialector_Call{Call: _e.mock.On("Dialector")}
}

func (_c *Driver_Dialector_Call) Run(run func()) *Driver_Dialector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Driver_Dialector_Call) Return(_a0 gorm.Dialector) *Driver_Dialector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Driver_Dialector_Call) RunAndReturn(run func() gorm.Dialector) *Driver_Dialector_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
