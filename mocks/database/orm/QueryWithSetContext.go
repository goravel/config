// Code generated by mockery. DO NOT EDIT.

package orm

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QueryWithSetContext is an autogenerated mock type for the QueryWithSetContext type
type QueryWithSetContext struct {
	mock.Mock
}

type QueryWithSetContext_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryWithSetContext) EXPECT() *QueryWithSetContext_Expecter {
	return &QueryWithSetContext_Expecter{mock: &_m.Mock}
}

// SetContext provides a mock function with given fields: ctx
func (_m *QueryWithSetContext) SetContext(ctx context.Context) {
	_m.Called(ctx)
}

// QueryWithSetContext_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type QueryWithSetContext_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QueryWithSetContext_Expecter) SetContext(ctx interface{}) *QueryWithSetContext_SetContext_Call {
	return &QueryWithSetContext_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *QueryWithSetContext_SetContext_Call) Run(run func(ctx context.Context)) *QueryWithSetContext_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QueryWithSetContext_SetContext_Call) Return() *QueryWithSetContext_SetContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueryWithSetContext_SetContext_Call) RunAndReturn(run func(context.Context)) *QueryWithSetContext_SetContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryWithSetContext creates a new instance of QueryWithSetContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryWithSetContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryWithSetContext {
	mock := &QueryWithSetContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
