// Code generated by mockery. DO NOT EDIT.

package schema

import (
	schema "github.com/goravel/framework/contracts/database/schema"
	mock "github.com/stretchr/testify/mock"
)

// DriverSchema is an autogenerated mock type for the DriverSchema type
type DriverSchema struct {
	mock.Mock
}

type DriverSchema_Expecter struct {
	mock *mock.Mock
}

func (_m *DriverSchema) EXPECT() *DriverSchema_Expecter {
	return &DriverSchema_Expecter{mock: &_m.Mock}
}

// DropAllTables provides a mock function with given fields:
func (_m *DriverSchema) DropAllTables() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DropAllTables")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriverSchema_DropAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAllTables'
type DriverSchema_DropAllTables_Call struct {
	*mock.Call
}

// DropAllTables is a helper method to define mock.On call
func (_e *DriverSchema_Expecter) DropAllTables() *DriverSchema_DropAllTables_Call {
	return &DriverSchema_DropAllTables_Call{Call: _e.mock.On("DropAllTables")}
}

func (_c *DriverSchema_DropAllTables_Call) Run(run func()) *DriverSchema_DropAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DriverSchema_DropAllTables_Call) Return(_a0 error) *DriverSchema_DropAllTables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DriverSchema_DropAllTables_Call) RunAndReturn(run func() error) *DriverSchema_DropAllTables_Call {
	_c.Call.Return(run)
	return _c
}

// DropAllTypes provides a mock function with given fields:
func (_m *DriverSchema) DropAllTypes() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DropAllTypes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriverSchema_DropAllTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAllTypes'
type DriverSchema_DropAllTypes_Call struct {
	*mock.Call
}

// DropAllTypes is a helper method to define mock.On call
func (_e *DriverSchema_Expecter) DropAllTypes() *DriverSchema_DropAllTypes_Call {
	return &DriverSchema_DropAllTypes_Call{Call: _e.mock.On("DropAllTypes")}
}

func (_c *DriverSchema_DropAllTypes_Call) Run(run func()) *DriverSchema_DropAllTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DriverSchema_DropAllTypes_Call) Return(_a0 error) *DriverSchema_DropAllTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DriverSchema_DropAllTypes_Call) RunAndReturn(run func() error) *DriverSchema_DropAllTypes_Call {
	_c.Call.Return(run)
	return _c
}

// DropAllViews provides a mock function with given fields:
func (_m *DriverSchema) DropAllViews() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DropAllViews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriverSchema_DropAllViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAllViews'
type DriverSchema_DropAllViews_Call struct {
	*mock.Call
}

// DropAllViews is a helper method to define mock.On call
func (_e *DriverSchema_Expecter) DropAllViews() *DriverSchema_DropAllViews_Call {
	return &DriverSchema_DropAllViews_Call{Call: _e.mock.On("DropAllViews")}
}

func (_c *DriverSchema_DropAllViews_Call) Run(run func()) *DriverSchema_DropAllViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DriverSchema_DropAllViews_Call) Return(_a0 error) *DriverSchema_DropAllViews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DriverSchema_DropAllViews_Call) RunAndReturn(run func() error) *DriverSchema_DropAllViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetColumns provides a mock function with given fields: table
func (_m *DriverSchema) GetColumns(table string) ([]schema.Column, error) {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for GetColumns")
	}

	var r0 []schema.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]schema.Column, error)); ok {
		return rf(table)
	}
	if rf, ok := ret.Get(0).(func(string) []schema.Column); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverSchema_GetColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColumns'
type DriverSchema_GetColumns_Call struct {
	*mock.Call
}

// GetColumns is a helper method to define mock.On call
//   - table string
func (_e *DriverSchema_Expecter) GetColumns(table interface{}) *DriverSchema_GetColumns_Call {
	return &DriverSchema_GetColumns_Call{Call: _e.mock.On("GetColumns", table)}
}

func (_c *DriverSchema_GetColumns_Call) Run(run func(table string)) *DriverSchema_GetColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DriverSchema_GetColumns_Call) Return(_a0 []schema.Column, _a1 error) *DriverSchema_GetColumns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DriverSchema_GetColumns_Call) RunAndReturn(run func(string) ([]schema.Column, error)) *DriverSchema_GetColumns_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndexes provides a mock function with given fields: table
func (_m *DriverSchema) GetIndexes(table string) ([]schema.Index, error) {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexes")
	}

	var r0 []schema.Index
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]schema.Index, error)); ok {
		return rf(table)
	}
	if rf, ok := ret.Get(0).(func(string) []schema.Index); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Index)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverSchema_GetIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndexes'
type DriverSchema_GetIndexes_Call struct {
	*mock.Call
}

// GetIndexes is a helper method to define mock.On call
//   - table string
func (_e *DriverSchema_Expecter) GetIndexes(table interface{}) *DriverSchema_GetIndexes_Call {
	return &DriverSchema_GetIndexes_Call{Call: _e.mock.On("GetIndexes", table)}
}

func (_c *DriverSchema_GetIndexes_Call) Run(run func(table string)) *DriverSchema_GetIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DriverSchema_GetIndexes_Call) Return(_a0 []schema.Index, _a1 error) *DriverSchema_GetIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DriverSchema_GetIndexes_Call) RunAndReturn(run func(string) ([]schema.Index, error)) *DriverSchema_GetIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// GetTypes provides a mock function with given fields:
func (_m *DriverSchema) GetTypes() ([]schema.Type, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTypes")
	}

	var r0 []schema.Type
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]schema.Type, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []schema.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Type)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DriverSchema_GetTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTypes'
type DriverSchema_GetTypes_Call struct {
	*mock.Call
}

// GetTypes is a helper method to define mock.On call
func (_e *DriverSchema_Expecter) GetTypes() *DriverSchema_GetTypes_Call {
	return &DriverSchema_GetTypes_Call{Call: _e.mock.On("GetTypes")}
}

func (_c *DriverSchema_GetTypes_Call) Run(run func()) *DriverSchema_GetTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DriverSchema_GetTypes_Call) Return(_a0 []schema.Type, _a1 error) *DriverSchema_GetTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DriverSchema_GetTypes_Call) RunAndReturn(run func() ([]schema.Type, error)) *DriverSchema_GetTypes_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriverSchema creates a new instance of DriverSchema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriverSchema(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriverSchema {
	mock := &DriverSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
