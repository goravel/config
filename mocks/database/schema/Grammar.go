// Code generated by mockery. DO NOT EDIT.

package schema

import (
	schema "github.com/goravel/framework/contracts/database/schema"
	mock "github.com/stretchr/testify/mock"
)

// Grammar is an autogenerated mock type for the Grammar type
type Grammar struct {
	mock.Mock
}

type Grammar_Expecter struct {
	mock *mock.Mock
}

func (_m *Grammar) EXPECT() *Grammar_Expecter {
	return &Grammar_Expecter{mock: &_m.Mock}
}

// CompileAdd provides a mock function with given fields: blueprint, command
func (_m *Grammar) CompileAdd(blueprint schema.Blueprint, command *schema.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileAdd")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint, *schema.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileAdd'
type Grammar_CompileAdd_Call struct {
	*mock.Call
}

// CompileAdd is a helper method to define mock.On call
//   - blueprint schema.Blueprint
//   - command *schema.Command
func (_e *Grammar_Expecter) CompileAdd(blueprint interface{}, command interface{}) *Grammar_CompileAdd_Call {
	return &Grammar_CompileAdd_Call{Call: _e.mock.On("CompileAdd", blueprint, command)}
}

func (_c *Grammar_CompileAdd_Call) Run(run func(blueprint schema.Blueprint, command *schema.Command)) *Grammar_CompileAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint), args[1].(*schema.Command))
	})
	return _c
}

func (_c *Grammar_CompileAdd_Call) Return(_a0 string) *Grammar_CompileAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileAdd_Call) RunAndReturn(run func(schema.Blueprint, *schema.Command) string) *Grammar_CompileAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CompileColumns provides a mock function with given fields: _a0, table
func (_m *Grammar) CompileColumns(_a0 string, table string) string {
	ret := _m.Called(_a0, table)

	if len(ret) == 0 {
		panic("no return value specified for CompileColumns")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileColumns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileColumns'
type Grammar_CompileColumns_Call struct {
	*mock.Call
}

// CompileColumns is a helper method to define mock.On call
//   - _a0 string
//   - table string
func (_e *Grammar_Expecter) CompileColumns(_a0 interface{}, table interface{}) *Grammar_CompileColumns_Call {
	return &Grammar_CompileColumns_Call{Call: _e.mock.On("CompileColumns", _a0, table)}
}

func (_c *Grammar_CompileColumns_Call) Run(run func(_a0 string, table string)) *Grammar_CompileColumns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Grammar_CompileColumns_Call) Return(_a0 string) *Grammar_CompileColumns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileColumns_Call) RunAndReturn(run func(string, string) string) *Grammar_CompileColumns_Call {
	_c.Call.Return(run)
	return _c
}

// CompileComment provides a mock function with given fields: blueprint, command
func (_m *Grammar) CompileComment(blueprint schema.Blueprint, command *schema.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileComment")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint, *schema.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileComment'
type Grammar_CompileComment_Call struct {
	*mock.Call
}

// CompileComment is a helper method to define mock.On call
//   - blueprint schema.Blueprint
//   - command *schema.Command
func (_e *Grammar_Expecter) CompileComment(blueprint interface{}, command interface{}) *Grammar_CompileComment_Call {
	return &Grammar_CompileComment_Call{Call: _e.mock.On("CompileComment", blueprint, command)}
}

func (_c *Grammar_CompileComment_Call) Run(run func(blueprint schema.Blueprint, command *schema.Command)) *Grammar_CompileComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint), args[1].(*schema.Command))
	})
	return _c
}

func (_c *Grammar_CompileComment_Call) Return(_a0 string) *Grammar_CompileComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileComment_Call) RunAndReturn(run func(schema.Blueprint, *schema.Command) string) *Grammar_CompileComment_Call {
	_c.Call.Return(run)
	return _c
}

// CompileCreate provides a mock function with given fields: blueprint
func (_m *Grammar) CompileCreate(blueprint schema.Blueprint) string {
	ret := _m.Called(blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompileCreate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint) string); ok {
		r0 = rf(blueprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileCreate'
type Grammar_CompileCreate_Call struct {
	*mock.Call
}

// CompileCreate is a helper method to define mock.On call
//   - blueprint schema.Blueprint
func (_e *Grammar_Expecter) CompileCreate(blueprint interface{}) *Grammar_CompileCreate_Call {
	return &Grammar_CompileCreate_Call{Call: _e.mock.On("CompileCreate", blueprint)}
}

func (_c *Grammar_CompileCreate_Call) Run(run func(blueprint schema.Blueprint)) *Grammar_CompileCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint))
	})
	return _c
}

func (_c *Grammar_CompileCreate_Call) Return(_a0 string) *Grammar_CompileCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileCreate_Call) RunAndReturn(run func(schema.Blueprint) string) *Grammar_CompileCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllDomains provides a mock function with given fields: domains
func (_m *Grammar) CompileDropAllDomains(domains []string) string {
	ret := _m.Called(domains)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllDomains")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(domains)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileDropAllDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllDomains'
type Grammar_CompileDropAllDomains_Call struct {
	*mock.Call
}

// CompileDropAllDomains is a helper method to define mock.On call
//   - domains []string
func (_e *Grammar_Expecter) CompileDropAllDomains(domains interface{}) *Grammar_CompileDropAllDomains_Call {
	return &Grammar_CompileDropAllDomains_Call{Call: _e.mock.On("CompileDropAllDomains", domains)}
}

func (_c *Grammar_CompileDropAllDomains_Call) Run(run func(domains []string)) *Grammar_CompileDropAllDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Grammar_CompileDropAllDomains_Call) Return(_a0 string) *Grammar_CompileDropAllDomains_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileDropAllDomains_Call) RunAndReturn(run func([]string) string) *Grammar_CompileDropAllDomains_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllTables provides a mock function with given fields: tables
func (_m *Grammar) CompileDropAllTables(tables []string) string {
	ret := _m.Called(tables)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllTables")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(tables)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileDropAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllTables'
type Grammar_CompileDropAllTables_Call struct {
	*mock.Call
}

// CompileDropAllTables is a helper method to define mock.On call
//   - tables []string
func (_e *Grammar_Expecter) CompileDropAllTables(tables interface{}) *Grammar_CompileDropAllTables_Call {
	return &Grammar_CompileDropAllTables_Call{Call: _e.mock.On("CompileDropAllTables", tables)}
}

func (_c *Grammar_CompileDropAllTables_Call) Run(run func(tables []string)) *Grammar_CompileDropAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Grammar_CompileDropAllTables_Call) Return(_a0 string) *Grammar_CompileDropAllTables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileDropAllTables_Call) RunAndReturn(run func([]string) string) *Grammar_CompileDropAllTables_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllTypes provides a mock function with given fields: types
func (_m *Grammar) CompileDropAllTypes(types []string) string {
	ret := _m.Called(types)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllTypes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(types)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileDropAllTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllTypes'
type Grammar_CompileDropAllTypes_Call struct {
	*mock.Call
}

// CompileDropAllTypes is a helper method to define mock.On call
//   - types []string
func (_e *Grammar_Expecter) CompileDropAllTypes(types interface{}) *Grammar_CompileDropAllTypes_Call {
	return &Grammar_CompileDropAllTypes_Call{Call: _e.mock.On("CompileDropAllTypes", types)}
}

func (_c *Grammar_CompileDropAllTypes_Call) Run(run func(types []string)) *Grammar_CompileDropAllTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Grammar_CompileDropAllTypes_Call) Return(_a0 string) *Grammar_CompileDropAllTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileDropAllTypes_Call) RunAndReturn(run func([]string) string) *Grammar_CompileDropAllTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropAllViews provides a mock function with given fields: views
func (_m *Grammar) CompileDropAllViews(views []string) string {
	ret := _m.Called(views)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropAllViews")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(views)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileDropAllViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropAllViews'
type Grammar_CompileDropAllViews_Call struct {
	*mock.Call
}

// CompileDropAllViews is a helper method to define mock.On call
//   - views []string
func (_e *Grammar_Expecter) CompileDropAllViews(views interface{}) *Grammar_CompileDropAllViews_Call {
	return &Grammar_CompileDropAllViews_Call{Call: _e.mock.On("CompileDropAllViews", views)}
}

func (_c *Grammar_CompileDropAllViews_Call) Run(run func(views []string)) *Grammar_CompileDropAllViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *Grammar_CompileDropAllViews_Call) Return(_a0 string) *Grammar_CompileDropAllViews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileDropAllViews_Call) RunAndReturn(run func([]string) string) *Grammar_CompileDropAllViews_Call {
	_c.Call.Return(run)
	return _c
}

// CompileDropIfExists provides a mock function with given fields: blueprint
func (_m *Grammar) CompileDropIfExists(blueprint schema.Blueprint) string {
	ret := _m.Called(blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompileDropIfExists")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint) string); ok {
		r0 = rf(blueprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileDropIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileDropIfExists'
type Grammar_CompileDropIfExists_Call struct {
	*mock.Call
}

// CompileDropIfExists is a helper method to define mock.On call
//   - blueprint schema.Blueprint
func (_e *Grammar_Expecter) CompileDropIfExists(blueprint interface{}) *Grammar_CompileDropIfExists_Call {
	return &Grammar_CompileDropIfExists_Call{Call: _e.mock.On("CompileDropIfExists", blueprint)}
}

func (_c *Grammar_CompileDropIfExists_Call) Run(run func(blueprint schema.Blueprint)) *Grammar_CompileDropIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint))
	})
	return _c
}

func (_c *Grammar_CompileDropIfExists_Call) Return(_a0 string) *Grammar_CompileDropIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileDropIfExists_Call) RunAndReturn(run func(schema.Blueprint) string) *Grammar_CompileDropIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// CompileForeign provides a mock function with given fields: blueprint, command
func (_m *Grammar) CompileForeign(blueprint schema.Blueprint, command *schema.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileForeign")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint, *schema.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileForeign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileForeign'
type Grammar_CompileForeign_Call struct {
	*mock.Call
}

// CompileForeign is a helper method to define mock.On call
//   - blueprint schema.Blueprint
//   - command *schema.Command
func (_e *Grammar_Expecter) CompileForeign(blueprint interface{}, command interface{}) *Grammar_CompileForeign_Call {
	return &Grammar_CompileForeign_Call{Call: _e.mock.On("CompileForeign", blueprint, command)}
}

func (_c *Grammar_CompileForeign_Call) Run(run func(blueprint schema.Blueprint, command *schema.Command)) *Grammar_CompileForeign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint), args[1].(*schema.Command))
	})
	return _c
}

func (_c *Grammar_CompileForeign_Call) Return(_a0 string) *Grammar_CompileForeign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileForeign_Call) RunAndReturn(run func(schema.Blueprint, *schema.Command) string) *Grammar_CompileForeign_Call {
	_c.Call.Return(run)
	return _c
}

// CompileIndex provides a mock function with given fields: blueprint, command
func (_m *Grammar) CompileIndex(blueprint schema.Blueprint, command *schema.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompileIndex")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint, *schema.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileIndex'
type Grammar_CompileIndex_Call struct {
	*mock.Call
}

// CompileIndex is a helper method to define mock.On call
//   - blueprint schema.Blueprint
//   - command *schema.Command
func (_e *Grammar_Expecter) CompileIndex(blueprint interface{}, command interface{}) *Grammar_CompileIndex_Call {
	return &Grammar_CompileIndex_Call{Call: _e.mock.On("CompileIndex", blueprint, command)}
}

func (_c *Grammar_CompileIndex_Call) Run(run func(blueprint schema.Blueprint, command *schema.Command)) *Grammar_CompileIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint), args[1].(*schema.Command))
	})
	return _c
}

func (_c *Grammar_CompileIndex_Call) Return(_a0 string) *Grammar_CompileIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileIndex_Call) RunAndReturn(run func(schema.Blueprint, *schema.Command) string) *Grammar_CompileIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CompileIndexes provides a mock function with given fields: _a0, table
func (_m *Grammar) CompileIndexes(_a0 string, table string) string {
	ret := _m.Called(_a0, table)

	if len(ret) == 0 {
		panic("no return value specified for CompileIndexes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileIndexes'
type Grammar_CompileIndexes_Call struct {
	*mock.Call
}

// CompileIndexes is a helper method to define mock.On call
//   - _a0 string
//   - table string
func (_e *Grammar_Expecter) CompileIndexes(_a0 interface{}, table interface{}) *Grammar_CompileIndexes_Call {
	return &Grammar_CompileIndexes_Call{Call: _e.mock.On("CompileIndexes", _a0, table)}
}

func (_c *Grammar_CompileIndexes_Call) Run(run func(_a0 string, table string)) *Grammar_CompileIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Grammar_CompileIndexes_Call) Return(_a0 string) *Grammar_CompileIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileIndexes_Call) RunAndReturn(run func(string, string) string) *Grammar_CompileIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// CompilePrimary provides a mock function with given fields: blueprint, command
func (_m *Grammar) CompilePrimary(blueprint schema.Blueprint, command *schema.Command) string {
	ret := _m.Called(blueprint, command)

	if len(ret) == 0 {
		panic("no return value specified for CompilePrimary")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Blueprint, *schema.Command) string); ok {
		r0 = rf(blueprint, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompilePrimary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompilePrimary'
type Grammar_CompilePrimary_Call struct {
	*mock.Call
}

// CompilePrimary is a helper method to define mock.On call
//   - blueprint schema.Blueprint
//   - command *schema.Command
func (_e *Grammar_Expecter) CompilePrimary(blueprint interface{}, command interface{}) *Grammar_CompilePrimary_Call {
	return &Grammar_CompilePrimary_Call{Call: _e.mock.On("CompilePrimary", blueprint, command)}
}

func (_c *Grammar_CompilePrimary_Call) Run(run func(blueprint schema.Blueprint, command *schema.Command)) *Grammar_CompilePrimary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Blueprint), args[1].(*schema.Command))
	})
	return _c
}

func (_c *Grammar_CompilePrimary_Call) Return(_a0 string) *Grammar_CompilePrimary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompilePrimary_Call) RunAndReturn(run func(schema.Blueprint, *schema.Command) string) *Grammar_CompilePrimary_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTables provides a mock function with given fields: database
func (_m *Grammar) CompileTables(database string) string {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for CompileTables")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTables'
type Grammar_CompileTables_Call struct {
	*mock.Call
}

// CompileTables is a helper method to define mock.On call
//   - database string
func (_e *Grammar_Expecter) CompileTables(database interface{}) *Grammar_CompileTables_Call {
	return &Grammar_CompileTables_Call{Call: _e.mock.On("CompileTables", database)}
}

func (_c *Grammar_CompileTables_Call) Run(run func(database string)) *Grammar_CompileTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Grammar_CompileTables_Call) Return(_a0 string) *Grammar_CompileTables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileTables_Call) RunAndReturn(run func(string) string) *Grammar_CompileTables_Call {
	_c.Call.Return(run)
	return _c
}

// CompileTypes provides a mock function with given fields:
func (_m *Grammar) CompileTypes() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CompileTypes")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileTypes'
type Grammar_CompileTypes_Call struct {
	*mock.Call
}

// CompileTypes is a helper method to define mock.On call
func (_e *Grammar_Expecter) CompileTypes() *Grammar_CompileTypes_Call {
	return &Grammar_CompileTypes_Call{Call: _e.mock.On("CompileTypes")}
}

func (_c *Grammar_CompileTypes_Call) Run(run func()) *Grammar_CompileTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Grammar_CompileTypes_Call) Return(_a0 string) *Grammar_CompileTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileTypes_Call) RunAndReturn(run func() string) *Grammar_CompileTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CompileViews provides a mock function with given fields: database
func (_m *Grammar) CompileViews(database string) string {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for CompileViews")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_CompileViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompileViews'
type Grammar_CompileViews_Call struct {
	*mock.Call
}

// CompileViews is a helper method to define mock.On call
//   - database string
func (_e *Grammar_Expecter) CompileViews(database interface{}) *Grammar_CompileViews_Call {
	return &Grammar_CompileViews_Call{Call: _e.mock.On("CompileViews", database)}
}

func (_c *Grammar_CompileViews_Call) Run(run func(database string)) *Grammar_CompileViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Grammar_CompileViews_Call) Return(_a0 string) *Grammar_CompileViews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_CompileViews_Call) RunAndReturn(run func(string) string) *Grammar_CompileViews_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttributeCommands provides a mock function with given fields:
func (_m *Grammar) GetAttributeCommands() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAttributeCommands")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Grammar_GetAttributeCommands_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttributeCommands'
type Grammar_GetAttributeCommands_Call struct {
	*mock.Call
}

// GetAttributeCommands is a helper method to define mock.On call
func (_e *Grammar_Expecter) GetAttributeCommands() *Grammar_GetAttributeCommands_Call {
	return &Grammar_GetAttributeCommands_Call{Call: _e.mock.On("GetAttributeCommands")}
}

func (_c *Grammar_GetAttributeCommands_Call) Run(run func()) *Grammar_GetAttributeCommands_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Grammar_GetAttributeCommands_Call) Return(_a0 []string) *Grammar_GetAttributeCommands_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_GetAttributeCommands_Call) RunAndReturn(run func() []string) *Grammar_GetAttributeCommands_Call {
	_c.Call.Return(run)
	return _c
}

// TypeBigInteger provides a mock function with given fields: column
func (_m *Grammar) TypeBigInteger(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeBigInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeBigInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeBigInteger'
type Grammar_TypeBigInteger_Call struct {
	*mock.Call
}

// TypeBigInteger is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeBigInteger(column interface{}) *Grammar_TypeBigInteger_Call {
	return &Grammar_TypeBigInteger_Call{Call: _e.mock.On("TypeBigInteger", column)}
}

func (_c *Grammar_TypeBigInteger_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeBigInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeBigInteger_Call) Return(_a0 string) *Grammar_TypeBigInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeBigInteger_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeBigInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeChar provides a mock function with given fields: column
func (_m *Grammar) TypeChar(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeChar")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeChar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeChar'
type Grammar_TypeChar_Call struct {
	*mock.Call
}

// TypeChar is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeChar(column interface{}) *Grammar_TypeChar_Call {
	return &Grammar_TypeChar_Call{Call: _e.mock.On("TypeChar", column)}
}

func (_c *Grammar_TypeChar_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeChar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeChar_Call) Return(_a0 string) *Grammar_TypeChar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeChar_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeChar_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDecimal provides a mock function with given fields: column
func (_m *Grammar) TypeDecimal(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDecimal")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeDecimal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDecimal'
type Grammar_TypeDecimal_Call struct {
	*mock.Call
}

// TypeDecimal is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeDecimal(column interface{}) *Grammar_TypeDecimal_Call {
	return &Grammar_TypeDecimal_Call{Call: _e.mock.On("TypeDecimal", column)}
}

func (_c *Grammar_TypeDecimal_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeDecimal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeDecimal_Call) Return(_a0 string) *Grammar_TypeDecimal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeDecimal_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeDecimal_Call {
	_c.Call.Return(run)
	return _c
}

// TypeDouble provides a mock function with given fields: column
func (_m *Grammar) TypeDouble(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeDouble")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeDouble_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeDouble'
type Grammar_TypeDouble_Call struct {
	*mock.Call
}

// TypeDouble is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeDouble(column interface{}) *Grammar_TypeDouble_Call {
	return &Grammar_TypeDouble_Call{Call: _e.mock.On("TypeDouble", column)}
}

func (_c *Grammar_TypeDouble_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeDouble_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeDouble_Call) Return(_a0 string) *Grammar_TypeDouble_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeDouble_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeDouble_Call {
	_c.Call.Return(run)
	return _c
}

// TypeEnum provides a mock function with given fields: column
func (_m *Grammar) TypeEnum(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeEnum")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeEnum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeEnum'
type Grammar_TypeEnum_Call struct {
	*mock.Call
}

// TypeEnum is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeEnum(column interface{}) *Grammar_TypeEnum_Call {
	return &Grammar_TypeEnum_Call{Call: _e.mock.On("TypeEnum", column)}
}

func (_c *Grammar_TypeEnum_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeEnum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeEnum_Call) Return(_a0 string) *Grammar_TypeEnum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeEnum_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeEnum_Call {
	_c.Call.Return(run)
	return _c
}

// TypeFloat provides a mock function with given fields: column
func (_m *Grammar) TypeFloat(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeFloat")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeFloat'
type Grammar_TypeFloat_Call struct {
	*mock.Call
}

// TypeFloat is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeFloat(column interface{}) *Grammar_TypeFloat_Call {
	return &Grammar_TypeFloat_Call{Call: _e.mock.On("TypeFloat", column)}
}

func (_c *Grammar_TypeFloat_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeFloat_Call) Return(_a0 string) *Grammar_TypeFloat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeFloat_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeFloat_Call {
	_c.Call.Return(run)
	return _c
}

// TypeInteger provides a mock function with given fields: column
func (_m *Grammar) TypeInteger(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeInteger'
type Grammar_TypeInteger_Call struct {
	*mock.Call
}

// TypeInteger is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeInteger(column interface{}) *Grammar_TypeInteger_Call {
	return &Grammar_TypeInteger_Call{Call: _e.mock.On("TypeInteger", column)}
}

func (_c *Grammar_TypeInteger_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeInteger_Call) Return(_a0 string) *Grammar_TypeInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeInteger_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeJson provides a mock function with given fields: column
func (_m *Grammar) TypeJson(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeJson")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeJson'
type Grammar_TypeJson_Call struct {
	*mock.Call
}

// TypeJson is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeJson(column interface{}) *Grammar_TypeJson_Call {
	return &Grammar_TypeJson_Call{Call: _e.mock.On("TypeJson", column)}
}

func (_c *Grammar_TypeJson_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeJson_Call) Return(_a0 string) *Grammar_TypeJson_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeJson_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeJson_Call {
	_c.Call.Return(run)
	return _c
}

// TypeJsonb provides a mock function with given fields: column
func (_m *Grammar) TypeJsonb(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeJsonb")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeJsonb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeJsonb'
type Grammar_TypeJsonb_Call struct {
	*mock.Call
}

// TypeJsonb is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeJsonb(column interface{}) *Grammar_TypeJsonb_Call {
	return &Grammar_TypeJsonb_Call{Call: _e.mock.On("TypeJsonb", column)}
}

func (_c *Grammar_TypeJsonb_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeJsonb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeJsonb_Call) Return(_a0 string) *Grammar_TypeJsonb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeJsonb_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeJsonb_Call {
	_c.Call.Return(run)
	return _c
}

// TypeLongText provides a mock function with given fields: column
func (_m *Grammar) TypeLongText(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeLongText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeLongText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeLongText'
type Grammar_TypeLongText_Call struct {
	*mock.Call
}

// TypeLongText is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeLongText(column interface{}) *Grammar_TypeLongText_Call {
	return &Grammar_TypeLongText_Call{Call: _e.mock.On("TypeLongText", column)}
}

func (_c *Grammar_TypeLongText_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeLongText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeLongText_Call) Return(_a0 string) *Grammar_TypeLongText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeLongText_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeLongText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeMediumInteger provides a mock function with given fields: column
func (_m *Grammar) TypeMediumInteger(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeMediumInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeMediumInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeMediumInteger'
type Grammar_TypeMediumInteger_Call struct {
	*mock.Call
}

// TypeMediumInteger is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeMediumInteger(column interface{}) *Grammar_TypeMediumInteger_Call {
	return &Grammar_TypeMediumInteger_Call{Call: _e.mock.On("TypeMediumInteger", column)}
}

func (_c *Grammar_TypeMediumInteger_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeMediumInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeMediumInteger_Call) Return(_a0 string) *Grammar_TypeMediumInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeMediumInteger_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeMediumInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeMediumText provides a mock function with given fields: column
func (_m *Grammar) TypeMediumText(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeMediumText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeMediumText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeMediumText'
type Grammar_TypeMediumText_Call struct {
	*mock.Call
}

// TypeMediumText is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeMediumText(column interface{}) *Grammar_TypeMediumText_Call {
	return &Grammar_TypeMediumText_Call{Call: _e.mock.On("TypeMediumText", column)}
}

func (_c *Grammar_TypeMediumText_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeMediumText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeMediumText_Call) Return(_a0 string) *Grammar_TypeMediumText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeMediumText_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeMediumText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeSmallInteger provides a mock function with given fields: column
func (_m *Grammar) TypeSmallInteger(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeSmallInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeSmallInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeSmallInteger'
type Grammar_TypeSmallInteger_Call struct {
	*mock.Call
}

// TypeSmallInteger is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeSmallInteger(column interface{}) *Grammar_TypeSmallInteger_Call {
	return &Grammar_TypeSmallInteger_Call{Call: _e.mock.On("TypeSmallInteger", column)}
}

func (_c *Grammar_TypeSmallInteger_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeSmallInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeSmallInteger_Call) Return(_a0 string) *Grammar_TypeSmallInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeSmallInteger_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeSmallInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeString provides a mock function with given fields: column
func (_m *Grammar) TypeString(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeString'
type Grammar_TypeString_Call struct {
	*mock.Call
}

// TypeString is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeString(column interface{}) *Grammar_TypeString_Call {
	return &Grammar_TypeString_Call{Call: _e.mock.On("TypeString", column)}
}

func (_c *Grammar_TypeString_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeString_Call) Return(_a0 string) *Grammar_TypeString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeString_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeString_Call {
	_c.Call.Return(run)
	return _c
}

// TypeText provides a mock function with given fields: column
func (_m *Grammar) TypeText(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeText'
type Grammar_TypeText_Call struct {
	*mock.Call
}

// TypeText is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeText(column interface{}) *Grammar_TypeText_Call {
	return &Grammar_TypeText_Call{Call: _e.mock.On("TypeText", column)}
}

func (_c *Grammar_TypeText_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeText_Call) Return(_a0 string) *Grammar_TypeText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeText_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeText_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTinyInteger provides a mock function with given fields: column
func (_m *Grammar) TypeTinyInteger(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTinyInteger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeTinyInteger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTinyInteger'
type Grammar_TypeTinyInteger_Call struct {
	*mock.Call
}

// TypeTinyInteger is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeTinyInteger(column interface{}) *Grammar_TypeTinyInteger_Call {
	return &Grammar_TypeTinyInteger_Call{Call: _e.mock.On("TypeTinyInteger", column)}
}

func (_c *Grammar_TypeTinyInteger_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeTinyInteger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeTinyInteger_Call) Return(_a0 string) *Grammar_TypeTinyInteger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeTinyInteger_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeTinyInteger_Call {
	_c.Call.Return(run)
	return _c
}

// TypeTinyText provides a mock function with given fields: column
func (_m *Grammar) TypeTinyText(column schema.ColumnDefinition) string {
	ret := _m.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for TypeTinyText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.ColumnDefinition) string); ok {
		r0 = rf(column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Grammar_TypeTinyText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeTinyText'
type Grammar_TypeTinyText_Call struct {
	*mock.Call
}

// TypeTinyText is a helper method to define mock.On call
//   - column schema.ColumnDefinition
func (_e *Grammar_Expecter) TypeTinyText(column interface{}) *Grammar_TypeTinyText_Call {
	return &Grammar_TypeTinyText_Call{Call: _e.mock.On("TypeTinyText", column)}
}

func (_c *Grammar_TypeTinyText_Call) Run(run func(column schema.ColumnDefinition)) *Grammar_TypeTinyText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.ColumnDefinition))
	})
	return _c
}

func (_c *Grammar_TypeTinyText_Call) Return(_a0 string) *Grammar_TypeTinyText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Grammar_TypeTinyText_Call) RunAndReturn(run func(schema.ColumnDefinition) string) *Grammar_TypeTinyText_Call {
	_c.Call.Return(run)
	return _c
}

// NewGrammar creates a new instance of Grammar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrammar(t interface {
	mock.TestingT
	Cleanup(func())
}) *Grammar {
	mock := &Grammar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
