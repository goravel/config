// Code generated by mockery. DO NOT EDIT.

package schema

import (
	schema "github.com/goravel/framework/contracts/database/schema"
	mock "github.com/stretchr/testify/mock"
)

// CommonSchema is an autogenerated mock type for the CommonSchema type
type CommonSchema struct {
	mock.Mock
}

type CommonSchema_Expecter struct {
	mock *mock.Mock
}

func (_m *CommonSchema) EXPECT() *CommonSchema_Expecter {
	return &CommonSchema_Expecter{mock: &_m.Mock}
}

// GetTables provides a mock function with given fields:
func (_m *CommonSchema) GetTables() ([]schema.Table, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTables")
	}

	var r0 []schema.Table
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]schema.Table, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []schema.Table); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.Table)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommonSchema_GetTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTables'
type CommonSchema_GetTables_Call struct {
	*mock.Call
}

// GetTables is a helper method to define mock.On call
func (_e *CommonSchema_Expecter) GetTables() *CommonSchema_GetTables_Call {
	return &CommonSchema_GetTables_Call{Call: _e.mock.On("GetTables")}
}

func (_c *CommonSchema_GetTables_Call) Run(run func()) *CommonSchema_GetTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommonSchema_GetTables_Call) Return(_a0 []schema.Table, _a1 error) *CommonSchema_GetTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommonSchema_GetTables_Call) RunAndReturn(run func() ([]schema.Table, error)) *CommonSchema_GetTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetViews provides a mock function with given fields:
func (_m *CommonSchema) GetViews() ([]schema.View, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetViews")
	}

	var r0 []schema.View
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]schema.View, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []schema.View); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.View)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommonSchema_GetViews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViews'
type CommonSchema_GetViews_Call struct {
	*mock.Call
}

// GetViews is a helper method to define mock.On call
func (_e *CommonSchema_Expecter) GetViews() *CommonSchema_GetViews_Call {
	return &CommonSchema_GetViews_Call{Call: _e.mock.On("GetViews")}
}

func (_c *CommonSchema_GetViews_Call) Run(run func()) *CommonSchema_GetViews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CommonSchema_GetViews_Call) Return(_a0 []schema.View, _a1 error) *CommonSchema_GetViews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommonSchema_GetViews_Call) RunAndReturn(run func() ([]schema.View, error)) *CommonSchema_GetViews_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommonSchema creates a new instance of CommonSchema. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommonSchema(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommonSchema {
	mock := &CommonSchema{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
