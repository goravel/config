// Code generated by mockery. DO NOT EDIT.

package testing

import mock "github.com/stretchr/testify/mock"

// AssertableJSON is an autogenerated mock type for the AssertableJSON type
type AssertableJSON struct {
	mock.Mock
}

type AssertableJSON_Expecter struct {
	mock *mock.Mock
}

func (_m *AssertableJSON) EXPECT() *AssertableJSON_Expecter {
	return &AssertableJSON_Expecter{mock: &_m.Mock}
}

// Json provides a mock function with given fields:
func (_m *AssertableJSON) Json() map[string]any {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Json")
	}

	var r0 map[string]any
	if rf, ok := ret.Get(0).(func() map[string]any); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}

	return r0
}

// AssertableJSON_Json_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Json'
type AssertableJSON_Json_Call struct {
	*mock.Call
}

// Json is a helper method to define mock.On call
func (_e *AssertableJSON_Expecter) Json() *AssertableJSON_Json_Call {
	return &AssertableJSON_Json_Call{Call: _e.mock.On("Json")}
}

func (_c *AssertableJSON_Json_Call) Run(run func()) *AssertableJSON_Json_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AssertableJSON_Json_Call) Return(_a0 map[string]any) *AssertableJSON_Json_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AssertableJSON_Json_Call) RunAndReturn(run func() map[string]any) *AssertableJSON_Json_Call {
	_c.Call.Return(run)
	return _c
}

// NewAssertableJSON creates a new instance of AssertableJSON. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssertableJSON(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssertableJSON {
	mock := &AssertableJSON{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
