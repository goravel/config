// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	database "github.com/goravel/framework/contracts/database"

	mock "github.com/stretchr/testify/mock"
)

// Dsn is an autogenerated mock type for the Dsn type
type Dsn struct {
	mock.Mock
}

// Mysql provides a mock function with given fields: config
func (_m *Dsn) Mysql(config database.Config) string {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Mysql")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(database.Config) string); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Postgresql provides a mock function with given fields: config
func (_m *Dsn) Postgresql(config database.Config) string {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Postgresql")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(database.Config) string); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sqlite provides a mock function with given fields: config
func (_m *Dsn) Sqlite(config database.Config) string {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Sqlite")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(database.Config) string); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sqlserver provides a mock function with given fields: config
func (_m *Dsn) Sqlserver(config database.Config) string {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Sqlserver")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(database.Config) string); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewDsn creates a new instance of Dsn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDsn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dsn {
	mock := &Dsn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
