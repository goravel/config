// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	session "github.com/goravel/framework/contracts/session"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *Session) All() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Exists provides a mock function with given fields: key
func (_m *Session) Exists(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Flash provides a mock function with given fields: key, value
func (_m *Session) Flash(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Flash")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *Session) Flush() session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func() session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Forget provides a mock function with given fields: keys
func (_m *Session) Forget(keys ...string) session.Session {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Forget")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(...string) session.Session); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Get provides a mock function with given fields: key, defaultValue
func (_m *Session) Get(key string, defaultValue ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *Session) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Session) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Has provides a mock function with given fields: key
func (_m *Session) Has(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Invalidate provides a mock function with given fields:
func (_m *Session) Invalidate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Keep provides a mock function with given fields: keys
func (_m *Session) Keep(keys ...string) session.Session {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Keep")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(...string) session.Session); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Missing provides a mock function with given fields: key
func (_m *Session) Missing(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Missing")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Now provides a mock function with given fields: key, value
func (_m *Session) Now(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Only provides a mock function with given fields: keys
func (_m *Session) Only(keys []string) map[string]interface{} {
	ret := _m.Called(keys)

	if len(ret) == 0 {
		panic("no return value specified for Only")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func([]string) map[string]interface{}); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Pull provides a mock function with given fields: key, defaultValue
func (_m *Session) Pull(key string, defaultValue ...interface{}) interface{} {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, defaultValue...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(key, defaultValue...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Put provides a mock function with given fields: key, value
func (_m *Session) Put(key string, value interface{}) session.Session {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string, interface{}) session.Session); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Reflash provides a mock function with given fields:
func (_m *Session) Reflash() session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reflash")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func() session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Regenerate provides a mock function with given fields: destroy
func (_m *Session) Regenerate(destroy ...bool) error {
	_va := make([]interface{}, len(destroy))
	for _i := range destroy {
		_va[_i] = destroy[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Regenerate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...bool) error); ok {
		r0 = rf(destroy...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: key
func (_m *Session) Remove(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Save provides a mock function with given fields:
func (_m *Session) Save() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetID provides a mock function with given fields: id
func (_m *Session) SetID(id string) session.Session {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetID")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string) session.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// SetName provides a mock function with given fields: name
func (_m *Session) SetName(name string) session.Session {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SetName")
	}

	var r0 session.Session
	if rf, ok := ret.Get(0).(func(string) session.Session); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Session) Start() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Token provides a mock function with given fields:
func (_m *Session) Token() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
