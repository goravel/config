// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	http "github.com/goravel/framework/contracts/http"
	translation "github.com/goravel/framework/contracts/translation"
)

// Translator is an autogenerated mock type for the Translator type
type Translator struct {
	mock.Mock
}

// Choice provides a mock function with given fields: ctx, key, number, options
func (_m *Translator) Choice(ctx http.Context, key string, number int, options ...translation.Option) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, number)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Context, string, int, ...translation.Option) (string, error)); ok {
		return rf(ctx, key, number, options...)
	}
	if rf, ok := ret.Get(0).(func(http.Context, string, int, ...translation.Option) string); ok {
		r0 = rf(ctx, key, number, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.Context, string, int, ...translation.Option) error); ok {
		r1 = rf(ctx, key, number, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key, options
func (_m *Translator) Get(ctx http.Context, key string, options ...translation.Option) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Context, string, ...translation.Option) (string, error)); ok {
		return rf(ctx, key, options...)
	}
	if rf, ok := ret.Get(0).(func(http.Context, string, ...translation.Option) string); ok {
		r0 = rf(ctx, key, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.Context, string, ...translation.Option) error); ok {
		r1 = rf(ctx, key, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFallback provides a mock function with given fields: ctx
func (_m *Translator) GetFallback(ctx http.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(http.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLocale provides a mock function with given fields: ctx
func (_m *Translator) GetLocale(ctx http.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(http.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Has provides a mock function with given fields: ctx, key, options
func (_m *Translator) Has(ctx http.Context, key string, options ...translation.Option) bool {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(http.Context, string, ...translation.Option) bool); ok {
		r0 = rf(ctx, key, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetFallback provides a mock function with given fields: ctx, locale
func (_m *Translator) SetFallback(ctx http.Context, locale string) error {
	ret := _m.Called(ctx, locale)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Context, string) error); ok {
		r0 = rf(ctx, locale)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLocale provides a mock function with given fields: ctx, locale
func (_m *Translator) SetLocale(ctx http.Context, locale string) error {
	ret := _m.Called(ctx, locale)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Context, string) error); ok {
		r0 = rf(ctx, locale)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTranslator creates a new instance of Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Translator {
	mock := &Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
