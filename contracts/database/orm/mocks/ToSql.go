// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ToSql is an autogenerated mock type for the ToSql type
type ToSql struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *ToSql) Count() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Create provides a mock function with given fields: value
func (_m *ToSql) Create(value interface{}) string {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Delete provides a mock function with given fields: value, conds
func (_m *ToSql) Delete(value interface{}, conds ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) string); ok {
		r0 = rf(value, conds...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Find provides a mock function with given fields: dest, conds
func (_m *ToSql) Find(dest interface{}, conds ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) string); ok {
		r0 = rf(dest, conds...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// First provides a mock function with given fields: dest
func (_m *ToSql) First(dest interface{}) string {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: dest
func (_m *ToSql) Get(dest interface{}) string {
	ret := _m.Called(dest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Pluck provides a mock function with given fields: column, dest
func (_m *ToSql) Pluck(column string, dest interface{}) string {
	ret := _m.Called(column, dest)

	if len(ret) == 0 {
		panic("no return value specified for Pluck")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(column, dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Save provides a mock function with given fields: value
func (_m *ToSql) Save(value interface{}) string {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sum provides a mock function with given fields: column, dest
func (_m *ToSql) Sum(column string, dest interface{}) string {
	ret := _m.Called(column, dest)

	if len(ret) == 0 {
		panic("no return value specified for Sum")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(column, dest)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields: column, value
func (_m *ToSql) Update(column interface{}, value ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, column)
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) string); ok {
		r0 = rf(column, value...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewToSql creates a new instance of ToSql. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToSql(t interface {
	mock.TestingT
	Cleanup(func())
}) *ToSql {
	mock := &ToSql{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
